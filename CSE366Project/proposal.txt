Ansible Proposal

Introduction:
There are a whole bunch of system administration tools that can help administrators perform their jobs easier but in many cases it increases the amount of work and time. We have tools like Chef and Puppet to use but some may find it complicated to use and difficult to set up since it does require all your machines to have its program. A system admnistrator's role is to controll access, automate tasks, installing and upgrading software, monitoring and troubleshooting. It is very important that the administrator can perform all these roles in the least amount of time possible. And as i have stated some of the tools require too much for us to begin doing what we want to do. 

Solution:
Michael Deehan solved this problem by creating Ansible. Ansible is an IT  automation engine sponsored by Red Hat in which deals with automating cloud provisiong, application deployment, intra-service orchestration, and serveral other IT tasks. Deehan built Ansible to be simple but very powerful engine. Ansible was created to be easy to understand with its human readable language. Unlike Chef and Puppet, Ansible only needs to be installed on one main computer that will be performing all your automation. Ansible does require that you have you have python and passwordless sudo enabled on the machines you will be controlling. Ansible works by connecting to your remote clients through an SSH connection, ansible does recommend that you have ssh certicifates for your remote clients that it connect to them without being prompted a password. When ansible connects to your remote machines it gathers information about your computer such as the OS you are running on, the packages you hve installed on your machine, if they are updated, etc. These facts become very useful when you start automating your machines. After Ansible gathers facts about your computer it then runs your playbooks. Playbooks are Ansible's automation files that perform the tasks on your computer(s) you program it to do. Playbooks are written in YAML, and are what makes ansible a very simple powerful engine. Ansible allows these playbooks to be run on serveral machines with different operating systems and to run multiple of tasks. Ansible didnt stop with making playbooks but also it designed roles. Ansible Roles are super convinient when writing playbooks, the idea of roles is so the administrators dont would have to write the same tasks over and over again for different playbooks. With Ansible Roles you simply initiate a role which in simplest terms is equal to a function that you can call in every playbook to be performed. Roles save a whole bunch of time and leaves writing your playbooks even more managable. 

Demo:
In my demonstration i will show the class how to get started with Ansible by first installing and configuring Ansible. Next i wil go over on how to create a playbook and create a test1.yml YAML file that will do a simple task to install some packages on our remoted machines. Next i will demonstrate and go over how to create more complex playbooks and how to use conditions defined by ansible to make controlling multiple OS systems easier to do. After goig over the basics of using Ansible Playbooks i will then go over creating Ansible roles. I will create a role called update that will update our packages and our OS. i will create another playbook that uses our update role but first i will use pre_tasks to perform before running our role. 

Conclusion:
Ansible is a great way to automate your machines and is super easy to learn thanks to its human readable format. Ansible offers so many ways to make performing your roles as a system administrator simple and helpful. Ansible is very powerful using its playbooks to perform multiple tasks and create roles to save time on creating playbooks.
